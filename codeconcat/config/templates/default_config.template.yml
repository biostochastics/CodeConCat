# CodeConCat Configuration File
# This is a sample configuration file with sensible defaults for most options.
# You can customize this file to suit your project's needs.

# --------------------------
# Basic Project Configuration
# --------------------------

# Preset Configuration (lean, medium, full)
# - lean: Minimal output with core code only
# - medium: Balanced output with code and important metadata
# - full: Comprehensive output with all available information
output_preset: medium

# Path Settings
include_paths:
  # Programming Languages
  - "**/*.py"    # Python
  - "**/*.js"    # JavaScript
  - "**/*.ts"    # TypeScript
  - "**/*.java"  # Java
  - "**/*.go"    # Go
  - "**/*.rb"    # Ruby
  - "**/*.php"   # PHP
  - "**/*.r"     # R
  - "**/*.rs"    # Rust
  - "**/*.cpp"   # C++
  - "**/*.c"     # C
  - "**/*.h"     # C/C++ Headers
  - "**/*.cs"    # C#
  - "**/*.jl"    # Julia

  # Documentation files - these are treated as full documentation content
  - "**/*.md"    # Markdown documentation
  - "**/*.rst"   # reStructuredText documentation
  - "README*"    # Always include README files
  - "LICENSE*"   # Always include license files

  # Configuration files - these are treated as configuration content
  - "**/*.yml"   # YAML configuration
  - "**/*.yaml"  # YAML configuration
  - "**/*.toml"  # TOML configuration
  - "**/*.ini"   # INI configuration
  - "**/*.cfg"   # CFG configuration
  - "**/*.conf"  # CONF configuration

# Commonly excluded directories and files
exclude_paths:
  - "**/tests/**"     # Test directories
  - "**/test/**"      # Test directories
  - "**/examples/**"  # Example code
  - "**/docs/**"      # Documentation directories
  - "**/build/**"     # Build directories
  - "**/dist/**"      # Distribution directories

# --------------------------
# Output Configuration
# --------------------------

# Output format (markdown, json, xml, text)
format: markdown

# Output file path (default based on format: output.md, output.json, etc.)
# output: output.md

# Copy output to clipboard
clipboard: false

# Sorting options
sort_files: false

# --------------------------
# Parser Configuration
# --------------------------

# Parser engine (tree_sitter, regex)
parser_engine: tree_sitter

# --------------------------
# Content Processing
# --------------------------

# Control output components
include_repo_overview: true
include_file_index: true
include_file_summary: true

# Content processing
# Set these to true to reduce output size
remove_comments: false
remove_docstrings: false
remove_empty_lines: false
disable_annotations: false
disable_ai_context: false
disable_tree: false

# Advanced Compression (disabled by default)
enable_compression: false
# Compression modes:
#   - low/medium: Contextual mode (keeps important code with surrounding context)
#   - high/aggressive: Essential mode (keeps only signatures, security, error handling)
compression_level: medium
compression_placeholder: "[...code omitted ({lines} lines, {issues} issues)...]"
compression_keep_threshold: 3
compression_keep_tags: ["important", "keep", "security"]

# --------------------------
# Filtering Behavior
# --------------------------

# Control filtering behavior (defaults are true)
use_gitignore: true
use_default_excludes: true

# --------------------------
# Security Validation
# --------------------------

# Enable security scanning to detect potentially malicious content
enable_security_scanning: true

# Security severity threshold (LOW, MEDIUM, HIGH, CRITICAL)
security_scan_severity_threshold: MEDIUM

# Semgrep security scanning integration
enable_semgrep: false  # Set to true to enable Semgrep scanning
install_semgrep: false  # Set to true to auto-install Semgrep if not present
# semgrep_ruleset: "path/to/custom/ruleset"  # Uncomment to use a custom ruleset
# semgrep_languages:  # Uncomment to specify languages to scan
#   - python
#   - javascript
#   - java

# Fail validation when suspicious content is detected
strict_security: false
